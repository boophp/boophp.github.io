---
title: C入门（九）
layout: post
---

# 一.变量的作用域与生存周期

## 变量

### 作用域
#### 局部变量

···
在函数内部定义说明的，作用域仅限于函数内，离开函数后再使用这种变量会提示找不到该变量！例如：

int max(inta, intb)
{int ;}

a,b,c 都是局部变量！不能在函数外调用喔

···

#### 全局变量

```
又称外部变量，即在函数外部定义的变量，在所有函数中都可以调用全局变量，比如定义在 `main` 函数外的结构体变量！
```

```
#include <stdio.h>
void test()
{
    int a = 3, b = 4;
    printf(函数中的ab的值分别为：%d %d\n, a, b;
}

int main()
{
    int a = 1, b = 2;
    test();
    printf("主函数中的ab的值分别为：%d\n", a, b);
    return 0;
}
}
```


### 生存周期

#### auto(自动变量)

```
这个是默认的，为们平时定义的变量都是这个，可以省略auto，只能在函数内部或者复合语句内部定义，局部变量的存储类型
```

#### static(静态变量)

```
static 修饰符不可省略，静态局部变量的初始化是在编译时进行的，如果没赋值初始化，系统默认初始化为 `0` 或 `\0`
只能赋值一次，在程序运行期间都不释放，生命周期是整个程序的运行周期
```

#### register(寄存器变量)

```
对于频繁读写的变量，为了提升程序的执行效率，允许把值放到CPU的寄存器中，需要时直接从寄存器中取出参与运算，不必再到内存中取
不过随着编译系统的优化，很多系统会将使用比较频繁的变量放到寄存器中，所以 register 定义变量的必要性不大！
```

#### extern(外部变量)

```
用于修饰全局变量，而全局变量的定义一般位于源文件的开头部分，所以在单个文件中用 `extern` 扩充全局变量的作用域就没必要了！
而用的比较多的情况是对应多文件的情况，只需要在另一个文件中用 `extern` 进行全局变量的外部声明，表示该变量的作用于已经扩展到此位置。
编译系统遇到 `extern` 先在文本中查找，找不到则到别的源文件中找，如果找到了则扩展到本文件，否则，按出错处理。
```


```
#include <stdio.h>
extern double area();
int r;
int main()
{
    double s;
    printf("请输入圆的半径:\n");
    scanf("%d", &r);
    s = area();
    printf("输出圆的面积为:%.1f\n", s);
    return 0;
}
```
```
extern int r;
extern double area()
{
    double s;
    s = 3.14 * r * r;
    return s;
}
```


# 二.编译预处理

## 编译预处理

### 宏定义
### 文件包含
### 条件编译